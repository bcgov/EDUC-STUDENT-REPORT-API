/*
 * *********************************************************************
 *  Copyright (c) 2016, Ministry of Education, BC.
 *
 *  All rights reserved.
 *    This information contained herein may not be used in whole
 *    or in part without the express written consent of the
 *    Government of British Columbia, Canada.
 *
 *  Revision Control Information
 *  File:                $Id::                                                 $
 *  Date of Last Commit: $Date::                                               $
 *  Revision Number:     $Rev::                                                $
 *  Last Commit by:      $Author::                                             $
 *
 * ***********************************************************************
 */
package ca.bc.gov.educ.isd.scholarship.impl;

import static ca.bc.gov.educ.isd.common.Constants.DATE_ISO_8601_FULL;
import static ca.bc.gov.educ.isd.common.Constants.DATE_YEAR;
import ca.bc.gov.educ.isd.common.DataException;
import ca.bc.gov.educ.isd.common.DomainServiceException;
import ca.bc.gov.educ.isd.eis.EISException;
import ca.bc.gov.educ.isd.eis.trax.db.Scholarship;
import ca.bc.gov.educ.isd.eis.trax.db.ScholarshipStudent;
import ca.bc.gov.educ.isd.eis.trax.db.TRAXAdapter;
import ca.bc.gov.educ.isd.reports.ReportDocument;
import ca.bc.gov.educ.isd.reports.ReportFormat;
import ca.bc.gov.educ.isd.reports.ReportService;
import ca.bc.gov.educ.isd.reports.ScholarshipReport;
import ca.bc.gov.educ.isd.scholarship.StudentScholarshipReport;
import ca.bc.gov.educ.isd.scholarship.StudentScholarshipService;
import ca.bc.gov.educ.isd.school.School;
import ca.bc.gov.educ.isd.student.PersonalEducationNumber;
import ca.bc.gov.educ.isd.student.Student;
import ca.bc.gov.educ.isd.student.StudentXRef;
import ca.bc.gov.educ.isd.student.StudentXRefService;
import ca.bc.gov.educ.isd.student.impl.CanadianPostalAddressImpl;
import ca.bc.gov.educ.isd.student.impl.SchoolImpl;
import ca.bc.gov.educ.isd.student.impl.StudentImpl;
import static ca.bc.gov.educ.isd.transcript.impl.constants.Roles.STUDENT_SCHOLARSHIP_REPORT;
import java.io.IOException;
import java.io.Serializable;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.security.DeclareRoles;
import javax.annotation.security.RolesAllowed;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.builder.CompareToBuilder;

/**
 * The Scholarship Services is an implementation component of the broader
 * Transcript Services group. As part of the mid-tier service layer the
 * buildReport method called by the GUI (browser) to display the scholarships
 * awarded to a student. The display is a rendered report generated by the
 * report service populated with data from the TRAX adaptor for the current user
 * as determined by the student demographics service.
 * <p>
 *  * This service integrates with the Student Demographics, the TRAX adaptor,
 * and the Reporting Service.
 * <p>
 * The security roles required to build a transcript report are:
 * <ol>
 * <li>STUDENT_SCHOLARSHIP_REPORT</li>
 * <li>TRAX_READ</li>
 * <li>SXR_READ</li>
 * <li>SXR_SEARCH</li>
 * <li>USER_REPORTS_EXPORT</li>
 * <li>USER_REPORTS_SCHOLARSHIPS</li>
 * <li>USER_PROFILE_SEARCH</li>
 * <li>USER_PROFILE_READ</li>
 * </ol>
 * <p>
 * @author CGI Information Management Consultants Inc.
 */
@DeclareRoles({STUDENT_SCHOLARSHIP_REPORT})
public class StudentScholarshipServiceImpl implements StudentScholarshipService, Serializable {

    private static final long serialVersionUID = 3L;
    private static final String CLASSNAME = StudentScholarshipServiceImpl.class.getName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    private TRAXAdapter traxAdapter;

    // TODO: Service Constant
    private ReportService reportService;

    // TODO: Service Constant
    private StudentXRefService studentXRefService;

    @Override
    @RolesAllowed(STUDENT_SCHOLARSHIP_REPORT)
    public StudentScholarshipReport buildReport(final ReportFormat format) throws DomainServiceException {
        final String _m = "buildReport(ReportFormat)";
        LOG.entering(CLASSNAME, _m);

        final String penId = getStudentPENId();
        final ScholarshipStudent scholarshipStudent = getScholarshipStudent(penId);
        final StudentScholarshipReport report;

        if (scholarshipStudent != null) {
            final List<Scholarship> traxScholarships = getTRAXScholarships(penId);

            final PersonalEducationNumber pen = getStudentPEN();

            // Transfer TRAX data to other objects for reporting.
            final Student student = adapt(pen, scholarshipStudent);
            final School school = adapt(scholarshipStudent);
            final List<ca.bc.gov.educ.isd.scholarship.Scholarship> scholarships
                    = adapt(traxScholarships);

            // access reporting services to generate report
            report = createReport(format, student, school, scholarships, pen.getEntityId());
        } else {
            // Student has no scholarship data.
            final String msg = "Failed to find student scholarship data in TRAX for PEN: " + penId;
            final DomainServiceException dse = new DomainServiceException(msg);
            LOG.log(Level.FINE, msg);
            throw dse;
        }

        LOG.exiting(CLASSNAME, _m);
        return report;
    }

    @Override
    @RolesAllowed(STUDENT_SCHOLARSHIP_REPORT)
    public List<ca.bc.gov.educ.isd.scholarship.Scholarship> getScholarships() throws DomainServiceException {
        final String _m = "getScholarships()";
        LOG.entering(CLASSNAME, _m);

        final String penId = getStudentPENId();
        final List<Scholarship> traxScholarships = getTRAXScholarships(penId);

        LOG.log(Level.FINE, "Retrieved the scholarships from TRAX for PEN: {0}", penId);

        final List<ca.bc.gov.educ.isd.scholarship.Scholarship> scholarships = adapt(traxScholarships);

        LOG.exiting(CLASSNAME, _m);
        return scholarships;
    }

    @Override
    @RolesAllowed(STUDENT_SCHOLARSHIP_REPORT)
    public List<ca.bc.gov.educ.isd.scholarship.Scholarship> getScholarships(
            final String pen) throws DomainServiceException {
        final String _m = "getScholarships(String)";
        LOG.entering(CLASSNAME, _m);

        final List<Scholarship> traxScholarships = getTRAXScholarships(pen);

        LOG.log(Level.FINE, "Retrieved the scholarships from TRAX for PEN: {0}", pen);

        final List<ca.bc.gov.educ.isd.scholarship.Scholarship> scholarships = adapt(traxScholarships);

        LOG.exiting(CLASSNAME, _m);
        return scholarships;
    }

    /**
     * Access TRAX adaptor to obtain required data for a student's PEN.
     *
     * @param pen Student's PEN.
     * @return
     * @throws DomainServiceException
     */
    private ScholarshipStudent getScholarshipStudent(final String pen) throws DomainServiceException {
        final String _m = "getScholarshipStudent(String)";
        LOG.entering(CLASSNAME, _m);

        final ScholarshipStudent student = getTRAXStudent(pen);

        if (student == null) {
            LOG.log(Level.FINE, "No scholarship student in TRAX for PEN: {0}", pen);
        }

        LOG.exiting(CLASSNAME, _m);
        return student;
    }

    private String getStudentPENId() throws DomainServiceException {
        final String _m = "getStudentPEN()";
        LOG.entering(CLASSNAME, _m);

        final PersonalEducationNumber pen = getStudentPEN();
        final String result = pen.getValue();

        LOG.exiting(CLASSNAME, _m);
        return result;
    }

    private PersonalEducationNumber getStudentPEN() throws DomainServiceException {
        final String _m = "getStudentPEN()";
        LOG.entering(CLASSNAME, _m);
        PersonalEducationNumber pen = null;

        if (studentXRefService.exists()) {
            StudentXRef sxref = studentXRefService.read();
            pen = sxref != null ? sxref.getPen() : null;
        }

        if (pen == null) {
            DomainServiceException dse = new DomainServiceException(
                    null,
                    "The current user is not a student with a PEN.");
            LOG.throwing(CLASSNAME, _m, dse);
            throw dse;
        }

        LOG.log(Level.FINE, "Confirmed the user is a student and retrieved the PEN: {0}.", pen);
        LOG.exiting(CLASSNAME, _m);
        return pen;
    }

    private List<Scholarship> getTRAXScholarships(final String pen) throws DomainServiceException {
        final String _m = "getTRAXScholarships(String)";
        LOG.entering(CLASSNAME, _m);

        final List<Scholarship> result = readCollection(pen);

        LOG.exiting(CLASSNAME, _m);
        return result;
    }

    /**
     * Read the static student data from TRAX which is needed for the
     * scholarship service.
     * <p>
     * @param pen
     * <p>
     * @return
     */
    private ScholarshipStudent getTRAXStudent(final String pen) throws DataException {
        final String _m = "getTRAXStudent(String)";
        LOG.entering(CLASSNAME, _m, pen);

        ScholarshipStudent studentInfo;

        try {
            studentInfo = traxAdapter.readStudent_Scholarship(pen);

            LOG.log(Level.FINER,
                    "Retrieved static student data from TRAX for PEN: {0}", pen);

            if (studentInfo != null) {
                LOG.log(Level.FINEST, "Retrieved student <{0}> scholarship data.",
                        studentInfo.getPen());
            }
        } catch (final EISException ex) {
            DataException dex = new DataException(
                    null,
                    null,
                    "Failed to access TRAX scholarship data for student with PEN: " + pen,
                    ex);
            LOG.throwing(CLASSNAME, _m, dex);
            throw dex;
        }

        LOG.exiting(CLASSNAME, _m);
        return studentInfo;
    }

    /**
     * Read the collection of scholarships from the TRAX Adaptor which is
     * required pen the scholarship service.
     * <p>
     * @param pen
     * <p>
     * @return
     */
    private List<Scholarship> readCollection(final String pen) throws DataException {
        final String methodName = "readCollection(String)";
        LOG.entering(CLASSNAME, methodName, pen);

        List<Scholarship> results;
        try {
            results = traxAdapter.readScholarships(pen);

            LOG.log(Level.FINER,
                    "Retrieved the collection of scholarships from TRAX for PEN: {0}",
                    pen);

            if (results != null && !results.isEmpty()) {
                LOG.log(Level.FINEST, "Retrieved student scholarship results:");
                for (Scholarship result : results) {
                    LOG.log(Level.FINEST, "{0} {1}",
                            new Object[]{result.getScholarshipName(), result.getScholarshipExpiry()});
                }
            }

        } catch (EISException ex) {
            String msg = "Failed to access TRAX scholarship data for student with PEN: ".concat(pen);
            DataException dex = new DataException(null, null, msg, ex);
            LOG.throwing(CLASSNAME, methodName, dex);
            throw dex;
        }

        LOG.log(Level.FINE, "Completed call to TRAX.");
        LOG.exiting(CLASSNAME, methodName);
        return results;
    }

    /**
     * Transfer the TRAX data from the data value object into a Student object.
     * <p>
     * @param penObj
     * @param traxStudent
     */
    private Student adapt(
            final PersonalEducationNumber penObj,
            final ScholarshipStudent traxStudent) {

        final String _m = "adapt(PersonalEducationNumber, ScholarshipStudent)";
        final Object[] params = {penObj, traxStudent};
        LOG.entering(CLASSNAME, _m, params);

        final StudentImpl student = new StudentImpl();
        student.setPen(penObj);
        student.setFirstName(traxStudent.getFirstName());
        student.setMiddleName(traxStudent.getMiddleName());
        student.setLastName(traxStudent.getLastName());
        student.setBirthdate(traxStudent.getBirthdate());

        final CanadianPostalAddressImpl address = new CanadianPostalAddressImpl();
        address.setStreet1(traxStudent.getStudentAddress1());
        address.setStreet2(traxStudent.getStudentAddress2());
        address.setCity(traxStudent.getStudentCity());
        address.setPostalCode(traxStudent.getStudentPostalCode());
        address.setRegion(traxStudent.getStudentProv());
        student.setCurrentMailingAddress(address);

        LOG.exiting(CLASSNAME, _m);
        return student;
    }

    /**
     * Transfer the TRAX data from the data value object into a School object.
     * <p>
     * @param traxStudent
     */
    private School adapt(final ScholarshipStudent traxStudent) {
        final String _m = "adapt(ScholarshipStudent)";
        LOG.entering(CLASSNAME, _m, traxStudent);

        final SchoolImpl school = new SchoolImpl();
        school.setMincode(traxStudent.getMincode());
        school.setName(traxStudent.getSchoolName());

        final CanadianPostalAddressImpl address = new CanadianPostalAddressImpl();
        address.setStreet1(traxStudent.getSchoolStreet());
        address.setStreet2(traxStudent.getSchoolStreet2());
        address.setCity(traxStudent.getSchoolCity());
        address.setPostalCode(traxStudent.getSchoolPostalCode());
        address.setRegion(traxStudent.getSchoolProv());
        school.setAddress(address);

        LOG.exiting(CLASSNAME, _m);
        return school;
    }

    /**
     * Transfer the TRAX data from the collection of data value objects into a
     * collection of Scholarship objects.
     * <p>
     * @param traxScholarships
     */
    private List<ca.bc.gov.educ.isd.scholarship.Scholarship> adapt(
            final List<Scholarship> traxScholarships) {
        final String _m = "adapt(List<ca.bc.gov.educ.isd.scholarship.Scholarship>)";
        final Object[] params = {traxScholarships};
        LOG.entering(CLASSNAME, _m, params);

        final List<ca.bc.gov.educ.isd.scholarship.Scholarship> scholarships = new ArrayList<>();

        if (traxScholarships != null) {
            for (final Scholarship traxScholarship : traxScholarships) {
                final ca.bc.gov.educ.isd.scholarship.impl.ScholarshipImpl scholarship = new ScholarshipImpl();
                scholarship.setAmount(traxScholarship.getAmount());
                scholarship.setExpiry(traxScholarship.getScholarshipExpiry());
                scholarship.setName(traxScholarship.getScholarshipName());
                scholarship.setRedeemed(traxScholarship.getRedeemedFlag());
                String traxCode = traxScholarship.getCode().toString();
                scholarship.setCode(traxCode);

                final String traxYear = traxScholarship.getAwardYear().toString();
                final SimpleDateFormat sdf = new SimpleDateFormat(DATE_YEAR);
                try {
                    final Date awardDate = sdf.parse(traxYear);
                    scholarship.setYearAwarded(awardDate);
                } catch (final ParseException ex) {
                    LOG.log(Level.SEVERE, "Failed to parse award year from TRAX.", ex);
                }

                scholarships.add(scholarship);
            }
        }

        Collections.sort(scholarships, createComparator());

        LOG.exiting(CLASSNAME, _m);
        return scholarships;
    }

    private Comparator<ca.bc.gov.educ.isd.scholarship.Scholarship> createComparator() {
        return new Comparator<ca.bc.gov.educ.isd.scholarship.Scholarship>() {
            @Override
            public int compare(
                    final ca.bc.gov.educ.isd.scholarship.Scholarship s1,
                    final ca.bc.gov.educ.isd.scholarship.Scholarship s2) {

                return new CompareToBuilder()
                        .append(s1.getYearAwarded(), s2.getYearAwarded())
                        .toComparison();
            }
        };
    }

    /**
     * Create the scholarship report.
     *
     * @param format
     * @param student
     * @param school
     * @param scholarships
     * @param entityId
     *
     * @return
     * @throws DomainServiceException
     */
    private StudentScholarshipReport createReport(
            final ReportFormat format,
            final Student student, School school,
            final List<ca.bc.gov.educ.isd.scholarship.Scholarship> scholarships,
            final String entityId
    ) throws DomainServiceException {

        final String _m = "createReport(ReportFormat, String, Student, School, List, String)";
        LOG.entering(CLASSNAME, _m);

        final String timestamp = new SimpleDateFormat(DATE_ISO_8601_FULL).format(new Date());

        ScholarshipReport scholarshipReport = reportService.createScholarshipReport();
        scholarshipReport.setStudent(student);
        scholarshipReport.setSchool(school, null);
        scholarshipReport.setScholarships(scholarships);
        scholarshipReport.setFormat(format);
        scholarshipReport.setReportDate(new Date());

        StudentScholarshipReport report = null;
        try {
            final ReportDocument document = reportService.export(scholarshipReport);

            final StringBuilder sb = new StringBuilder("scholarships_");
            sb.append(entityId);
            sb.append("_");
            sb.append(timestamp);
            sb.append(".");
            sb.append(format.getFilenameExtension());

            final String filename = sb.toString();
            final byte[] inData = ArrayUtils.nullToEmpty(document.asBytes());

            if (ArrayUtils.isEmpty(inData)) {
                String msg = "The generated report output is empty for student PEN: " + student.getPen();
                DomainServiceException dse = new DomainServiceException(null,
                        msg);
                LOG.throwing(CLASSNAME, _m, dse);
                throw dse;
            }
            byte[] rptData = inData;

            // TODO: Use a constant for the name.
            report = new StudentScholarshipReportImpl(rptData, format,
                    filename, "Scholarship");
        } catch (IOException ex) {
            LOG.log(Level.SEVERE,
                    "Failed to generate the scholarships report.", ex);
        }

        LOG.exiting(CLASSNAME, _m);
        return report;
    }
}
