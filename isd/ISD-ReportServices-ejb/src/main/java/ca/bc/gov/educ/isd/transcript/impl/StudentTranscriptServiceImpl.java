/*
 * *********************************************************************
 *  Copyright (c) 2017, Ministry of Education, BC.
 *
 *  All rights reserved.
 *    This information contained herein may not be used in whole
 *    or in part without the express written consent of the
 *    Government of British Columbia, Canada.
 *
 *  Revision Control Information
 *  File:                $Id::                                                 $
 *  Date of Last Commit: $Date::                                               $
 *  Revision Number:     $Rev::                                                $
 *  Last Commit by:      $Author::                                             $
 *
 * ***********************************************************************
 */
package ca.bc.gov.educ.isd.transcript.impl;

import ca.bc.gov.educ.exception.EntityNotFoundException;
import ca.bc.gov.educ.grad.dto.ReportData;
import ca.bc.gov.educ.isd.common.DataException;
import ca.bc.gov.educ.isd.common.DomainServiceException;
import ca.bc.gov.educ.isd.eis.EISException;
import ca.bc.gov.educ.isd.eis.trax.db.StudentDemographic;
import ca.bc.gov.educ.isd.eis.trax.db.StudentInfo;
import ca.bc.gov.educ.isd.eis.trax.db.TRAXAdapter;
import ca.bc.gov.educ.isd.eis.trax.db.TranscriptCourse;
import ca.bc.gov.educ.isd.grad.GradProgram;
import ca.bc.gov.educ.isd.grad.GraduationProgramCode;
import ca.bc.gov.educ.isd.grad.NonGradReason;
import ca.bc.gov.educ.isd.grad.impl.GradProgramImpl;
import ca.bc.gov.educ.isd.grad.impl.NonGradReasonImpl;
import ca.bc.gov.educ.isd.reports.*;
import ca.bc.gov.educ.isd.school.School;
import ca.bc.gov.educ.isd.student.PersonalEducationNumber;
import ca.bc.gov.educ.isd.student.Student;
import ca.bc.gov.educ.isd.student.impl.*;
import ca.bc.gov.educ.isd.transcript.*;
import ca.bc.gov.educ.isd.traxadaptor.dao.utils.TRAXThreadDataUtility;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.AsyncResult;
import org.springframework.stereotype.Service;

import javax.annotation.security.DeclareRoles;
import javax.annotation.security.RolesAllowed;
import java.io.IOException;
import java.io.Serializable;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;

import static ca.bc.gov.educ.isd.common.Constants.DATE_TRAX_YMD;
import static ca.bc.gov.educ.isd.common.Constants.PESC_HST_PREDICATE;
import static ca.bc.gov.educ.isd.common.support.VerifyUtils.nullSafe;
import static ca.bc.gov.educ.isd.common.support.impl.Roles.FULFILLMENT_SERVICES_USER;
import static ca.bc.gov.educ.isd.common.support.impl.Roles.USER;
import static ca.bc.gov.educ.isd.course.ReportCourseType.ASSESSMENT;
import static ca.bc.gov.educ.isd.course.ReportCourseType.PROVINCIALLY_EXAMINABLE;
import static ca.bc.gov.educ.isd.grad.GraduationProgramCode.PROGRAM_SCCP;
import static ca.bc.gov.educ.isd.reports.ReportFormat.PDF;
import static ca.bc.gov.educ.isd.reports.ReportFormat.XML;
import static ca.bc.gov.educ.isd.transcript.impl.RequirementNames.getName;
import static ca.bc.gov.educ.isd.transcript.impl.constants.Roles.STUDENT_TRANSCRIPT_REPORT;
import static java.lang.Integer.parseInt;
import static java.text.NumberFormat.getIntegerInstance;
import static org.apache.commons.lang3.ArrayUtils.isEmpty;

/**
 * The transcript service is an implementation component of the broader
 * Transcript Services group. As part of the mid-tier service layer the
 * buildReport method called by the GUI (browser) to display the unofficial
 * transcript of grades. The display is a rendered report generated by the
 * report service populated with data from the TRAX adaptor for the current user
 * as determined by the student demographics service.
 * <p>
 * This service integrates with the Student Demographics, the TRAX adaptor, and
 * the Reporting Service.
 * </p>
 *
 * The security roles required to build a transcript report are:
 * <ol>
 * <li>XS_REPORT</li>
 * <li>TRAX_READ</li>
 * <li>SXR_READ</li>
 * <li>SXR_SEARCH</li>
 * <li>USER_REPORTS_EXPORT</li>
 * <li>USER_REPORTS_TRANSCRIPT</li>
 * <li>USER_PROFILE_SEARCH</li>
 * <li>USER_PROFILE_READ</li>
 * <li>USER</li>
 * </ol>
 *
 * @author CGI Information Management Consultants Inc.
 */
@Service
@DeclareRoles({STUDENT_TRANSCRIPT_REPORT, USER, FULFILLMENT_SERVICES_USER})
public class StudentTranscriptServiceImpl implements StudentTranscriptService, Serializable {

    private static final long serialVersionUID = 5L;

    private static final String CLASSNAME = StudentTranscriptServiceImpl.class.getName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    /**
     * Sort order for ungraded courses (to bottom, above assessments).
     */
    private static final String SORT_UNGRADED = "99";

    /**
     * Sort order for assessments (to bottom, below ungraded).
     */
    private static final String SORT_ASSESSMENT = "100";

    @Autowired
    private TRAXAdapter traxAdapter;

    @Autowired
    private ReportService reportService;

    /**
     * Creates the student's official transcript as a PDF (no other formats are
     * allowed for official transcripts).
     *
     * @return A filled transcript report suitable for sending to a PSI.
     * @throws DomainServiceException
     * @throws IOException
     * @throws DataException
     */
    @Override
    @RolesAllowed({STUDENT_TRANSCRIPT_REPORT, USER})
    public StudentTranscriptReport buildOfficialTranscriptReport()
            throws DomainServiceException, IOException, DataException {
        return createTranscriptReport(PDF, false, false);
    }

    /**
     * Builds an unofficial transcript report.
     *
     * @param format PDF, HTML, etc.
     * @return
     * @throws DomainServiceException
     * @throws IOException
     * @throws DataException
     */
    @Override
    @RolesAllowed({STUDENT_TRANSCRIPT_REPORT, USER})
    public StudentTranscriptReport buildTranscriptReport(
            final ReportFormat format)
            throws DomainServiceException, IOException, DataException {
        return buildTranscriptReport(format, false);
    }

    /**
     * Builds an unofficial transcript report.
     *
     * @param format PDF, HTML, etc.
     * @param pen student identifier.
     * @return
     * @throws DomainServiceException
     * @throws IOException
     * @throws DataException
     */
    @Override
    @RolesAllowed({FULFILLMENT_SERVICES_USER})
    public StudentTranscriptReport buildTranscriptReport(
            final ReportFormat format, final PersonalEducationNumber pen, final Parameters parameters, final boolean interim)
            throws DomainServiceException, IOException, DataException {
        return createTranscriptReport(format, true, pen, parameters, interim);
    }

    /**
     * Builds an unofficial transcript report asynchronously. Calls
     * <code>createTranscriptReport(ReportFormat, true)</code> and returns the
     * result wrapped in an AsyncResult.
     *
     * @param format PDF, HTML, etc.
     * @return
     * @throws DomainServiceException
     * @throws IOException
     * @throws DataException
     */
    @Override
    @RolesAllowed({STUDENT_TRANSCRIPT_REPORT, USER})
    public Future<StudentTranscriptReport> buildTranscriptReportAsync(
            final ReportFormat format)
            throws DomainServiceException, IOException, DataException {
        return new AsyncResult<>(createTranscriptReport(format, true, false));
    }

    @Override
    @RolesAllowed({STUDENT_TRANSCRIPT_REPORT, USER})
    public Transcript getTranscript() throws DomainServiceException {
        final String _m = "getTranscript()";
        LOG.entering(CLASSNAME, _m);

        final String pen = getStudentPENId();
        final Transcript transcript = getTranscript(pen, false);

        LOG.exiting(CLASSNAME, _m);
        return transcript;
    }

    @Override
    @RolesAllowed({STUDENT_TRANSCRIPT_REPORT, USER})
    public Transcript getTranscript(
            final String pen,
            final boolean interim) throws DomainServiceException {
        final String _m = "getTranscript(String)";
        LOG.entering(CLASSNAME, _m);

        final List<TranscriptCourse> transcriptCourses = getTranscriptCourseList(pen, interim);
        final StudentInfo studentInfo = getStudentInfo(pen);
        final String programCode = studentInfo.getGradProgram();
        final GradProgram program = createGradProgram(programCode);
        final Date reportDate = studentInfo.getReportDate();

        final Transcript transcript = adapt(
                program.getCode(),
                transcriptCourses,
                reportDate,
                interim
        );

        LOG.exiting(CLASSNAME, _m);
        return transcript;
    }

    @Override
    @RolesAllowed({STUDENT_TRANSCRIPT_REPORT, USER})
    public Transcript getTranscriptInformation(final String pen) throws DomainServiceException {
        final String _m = "getTranscriptInformation(String)";
        LOG.entering(CLASSNAME, _m);

        Integer numberTranscriptCourses = 0;
        try {
            numberTranscriptCourses = traxAdapter.countCourses_Transcript(pen);
        } catch (EISException ex) {
            String msg = "Failed to access TRAX transcript course data for student with PEN: ".concat(pen);
            final DataException dex = new DataException(null, null, msg, ex);
            LOG.throwing(CLASSNAME, _m, dex);
            throw dex;
        }

        final StudentInfo studentInfo = getStudentInfo(pen);
        final Date issueDate = studentInfo.getReportDate();

        boolean isEmpty = (numberTranscriptCourses == 0);
        final Transcript transcript = new TranscriptInformationImpl(issueDate, isEmpty);

        LOG.exiting(CLASSNAME, _m);
        return transcript;
    }

    private GradProgram createGradProgram(String code) {
        return new GradProgramImpl(GraduationProgramCode.valueFrom(code));
    }

    /**
     * Creates a report in a specific format, either official or unofficial,
     * depending on the preview value.
     *
     * @param format
     * @param preview Set to false to create an unofficial transcript
     * @return
     * @throws DomainServiceException
     * @throws IOException
     * @throws DataException
     */
    private StudentTranscriptReport createTranscriptReport(
            final ReportFormat format,
            final boolean preview, final boolean interim)
            throws DomainServiceException, IOException, DataException {
        final String _m = "createTranscript(ReportFormat, boolean)";
        LOG.entering(CLASSNAME, _m);

        final PersonalEducationNumber pen = getStudentPEN();
        LOG.log(Level.FINE, "Retrieved studentInfo for pen: {0}.", pen.getValue());

        final StudentTranscriptReport report = getStudentTranscriptReport(
                pen, format, preview, null, interim
        );
        LOG.exiting(CLASSNAME, _m);
        return report;
    }

    /**
     * Creates a report in a specific format, either official or unofficial,
     * depending on the preview value. Takes the PEN to generate the desired
     * report.
     *
     * @param format
     * @param preview Set to false to create an unofficial transcript
     * @return
     * @throws DomainServiceException
     * @throws IOException
     * @throws DataException
     */
    private StudentTranscriptReport createTranscriptReport(
            final ReportFormat format,
            final boolean preview, final PersonalEducationNumber pen, final Parameters parameters, final boolean interim)
            throws DomainServiceException, IOException, DataException {
        final String _m = "createTranscript(ReportFormat, boolean)";
        LOG.entering(CLASSNAME, _m);
        LOG.log(Level.FINE, "Retrieved transcript for pen: {0}.", pen.getValue());

        final StudentTranscriptReport report = getStudentTranscriptReport(pen, format, preview, parameters, interim);
        LOG.log(Level.INFO, "Created StudentTranscriptReport for pen: {0}.", pen.getValue());

        LOG.exiting(CLASSNAME, _m);
        return report;
    }

    private String getStudentPENId() throws DomainServiceException {
        final String _m = "getStudentPENId()";
        LOG.entering(CLASSNAME, _m);

        final PersonalEducationNumber pen = getStudentPEN();
        final String result = pen.getValue();

        LOG.exiting(CLASSNAME, _m);
        return result;
    }

    private PersonalEducationNumber getStudentPEN() throws DomainServiceException {
        final String _m = "getStudentPEN()";
        LOG.entering(CLASSNAME, _m);

        ReportData reportData = TRAXThreadDataUtility.getGenerateReportData();

        if (reportData == null) {
            EntityNotFoundException dse = new EntityNotFoundException(
                    null,
                    "Report Data not exists for the current report generation");
            LOG.throwing(CLASSNAME, _m, dse);
            throw dse;
        }

        PersonalEducationNumberSimple pen = new PersonalEducationNumberSimple();
        pen.setPen(reportData.getStudent().getPen().toString());

        LOG.log(Level.FINE, "Confirmed the user is a student and retrieved the PEN: {0}.", pen);
        LOG.exiting(CLASSNAME, _m);
        return pen;
    }

    /**
     * Read the static student data from TRAX which is needed for the transcript
     * service.
     *
     * @param pen
     *
     * @return
     */
    private StudentInfo getStudentInfo(final String pen) throws DataException, DomainServiceException {
        final String _m = "getStudentInfo(String)";
        LOG.entering(CLASSNAME, _m);

        final StudentInfo studentInfo;

        try {
            studentInfo = traxAdapter.readStudent_Transcript(pen);

            LOG.log(Level.FINER,
                    "Retrieved student info from TRAX for PEN: {0}", pen);

            if (studentInfo == null) {
                final String msg = "Failed to find transcript results in TRAX for PEN: ".concat(pen);
                final DomainServiceException dse = new DomainServiceException(null, msg);
                LOG.throwing(CLASSNAME, _m, dse);
                throw dse;
            } else {
                LOG.log(Level.FINEST, "Retrieved student from transcript:");
                LOG.log(Level.FINEST, "{0} {1} {2}",
                        new Object[]{studentInfo.getPen(), studentInfo.getFirstName(), studentInfo.getLastName()});
            }

        } catch (EISException ex) {
            String msg = "Failed to access TRAX transcript data for student with PEN: ".concat(pen);
            final DataException dex = new DataException(null, null, msg, ex);
            LOG.throwing(CLASSNAME, _m, dex);
            throw dex;
        }

        LOG.log(Level.FINE, "Completed call to TRAX.");
        LOG.exiting(CLASSNAME, _m);
        return studentInfo;
    }

    /**
     * Read the static student data (demographics) from TRAX which is needed for
     * the transcript service.
     *
     * @param pen
     *
     * @return
     */
    private StudentDemographic getStudentDemog(final String pen) throws DataException, DomainServiceException {
        final String _m = "getStudentDemog(String)";
        LOG.entering(CLASSNAME, _m);

        final StudentDemographic studentDemographic;

        try {
            studentDemographic = traxAdapter.readStudent_Demographic(pen);

            LOG.log(Level.FINER,
                    "Retrieved student demographic from TRAX for PEN: {0}", pen);

            if (studentDemographic == null) {
                final String msg = "Failed to find demographic data in TRAX for PEN: ".concat(pen);
                final DomainServiceException dse = new DomainServiceException(null, msg);
                LOG.throwing(CLASSNAME, _m, dse);
                throw dse;
            } else {
                LOG.log(Level.FINEST, "Retrieved student demographic data:");
                LOG.log(Level.FINEST, "{0} {1} {2}",
                        new Object[]{studentDemographic.getPen(), studentDemographic.getFirstName(), studentDemographic.getLastName()});
            }

        } catch (EISException ex) {
            String msg = "Failed to access TRAX transcript data for student with PEN: ".concat(pen);
            final DataException dex = new DataException(null, null, msg, ex);
            LOG.throwing(CLASSNAME, _m, dex);
            throw dex;
        }

        LOG.log(Level.FINE, "Completed call to TRAX.");
        LOG.exiting(CLASSNAME, _m);
        return studentDemographic;
    }

    /**
     * Read the collection of transcript courses from the TRAX Adaptor which is
     * required for the transcript service.
     *
     * @param pen Student identifier.
     *
     * @return
     */
    private List<TranscriptCourse> getTranscriptCourseList(
            final String pen, final boolean interim)
            throws DataException, DomainServiceException {
        final String m_ = "getTranscriptCourseList(String, boolean)";
        LOG.entering(CLASSNAME, m_);

        final List<TranscriptCourse> results;

        try {
            if (interim) {
                final List<TranscriptCourse> interimTranscript
                        = traxAdapter.readCourses_InterimTranscript(pen);
                results = filterCourses(interimTranscript);
            } else {
                results = traxAdapter.readCourses_Transcript(pen);
            }

            LOG.log(Level.INFO,
                    "Retrieved the collection of exam results from TRAX for PEN: {0} INTERIM: {1}",
                    new Object[]{pen, interim});

            if (results != null && !results.isEmpty()) {
                LOG.log(Level.INFO,
                        "Total courses {0} retrieved  for PEN: {1}",
                        new Object[]{results.size(), pen});
                LOG.log(Level.FINEST, "Retrieved student transcript course results:");
                for (TranscriptCourse result : results) {
                    LOG.log(Level.FINEST, "{0} {1}",
                            new Object[]{result.getCourseName(), result.getFinalLetterGrade()});
                }
            }
        } catch (final EISException ex) {
            String msg = "Failed to access TRAX transcript course data for student with PEN: ".concat(pen);
            final DataException dex = new DataException(null, null, msg, ex);
            LOG.throwing(CLASSNAME, m_, dex);
            throw dex;
        }

        LOG.log(Level.FINE, "Completed call to TRAX.");
        LOG.exiting(CLASSNAME, m_);
        return results;
    }

    /**
     * Adapt the TRAX data from the data value object into a Student object.
     *
     * @param pen
     * @param traxStudentInfo
     */
    private Student adaptStudent(
            final PersonalEducationNumber pen,
            final StudentInfo traxStudentInfo) {

        final String _m = "adaptStudent(PersonalEducationNumber, StudentInfo)";
        final Object[] params = {pen, traxStudentInfo};
        LOG.entering(CLASSNAME, _m, params);

        final StudentImpl student = new StudentImpl();
        student.setPen(pen);
        student.setFirstName(traxStudentInfo.getFirstName());
        student.setMiddleName(traxStudentInfo.getMiddleName());
        student.setLastName(traxStudentInfo.getLastName());
        student.setBirthdate(traxStudentInfo.getBirthDate());
        student.setGrade(traxStudentInfo.getGrade());

        final PostalAddressImpl address = new PostalAddressImpl();
        address.setStreetLine1(traxStudentInfo.getStudentAddress1());
        address.setStreetLine2(traxStudentInfo.getStudentAddress2());
        address.setCity(traxStudentInfo.getStudentCity());
        address.setCode(traxStudentInfo.getStudentPostalCode());
        address.setRegion(traxStudentInfo.getStudentProv());
        address.setCountry(traxStudentInfo.getCountryCode());
        student.setCurrentMailingAddress(address);

        LOG.exiting(CLASSNAME, _m);
        return student;
    }

    /**
     * Adapt the TRAX data from the data value object into a School object.
     *
     * @param traxStudent
     */
    private School adaptSchool(final StudentInfo traxStudent) {
        final String m_ = "adaptSchool(StudentInfo)";
        LOG.entering(CLASSNAME, m_, traxStudent);

        final SchoolImpl school = new SchoolImpl();
        school.setMincode(traxStudent.getMincode());
        school.setName(traxStudent.getSchoolName());
        school.setTypeIndicator(traxStudent.getSchoolTypeIndicator());
        school.setTypeBanner(traxStudent.getSchoolTypeBanner());

        final CanadianPostalAddressImpl address = new CanadianPostalAddressImpl();
        address.setStreet1(traxStudent.getSchoolStreet());
        address.setStreet2(traxStudent.getSchoolStreet2());
        address.setCity(traxStudent.getSchoolCity());
        address.setPostalCode(traxStudent.getSchoolPostalCode());
        address.setProvince(traxStudent.getSchoolProv());
        school.setAddress(address);

        LOG.exiting(CLASSNAME, m_);
        return school;
    }

    /**
     * Adapt the TRAX data from the collection of data value objects into a
     * Transcript object.
     *
     * @param code The graduation program code that influences sort order.
     * @param traxTranscriptCourses
     * @param issueDate
     */
    private Transcript adapt(
            final GraduationProgramCode code,
            final List<TranscriptCourse> traxTranscriptCourses,
            final Date issueDate,
            final boolean interim) {
        final String m_ = "adapt(GraduationProgramCode, List<TranscriptCourse>, Date, boolean)";
        LOG.entering(CLASSNAME, m_, traxTranscriptCourses);

        final List<TranscriptResult> transcriptResults = adapt(
                code, traxTranscriptCourses);

        final TranscriptImpl transcript = new TranscriptImpl();
        transcript.setIssueDate(issueDate);
        transcript.setResults(transcriptResults);
        transcript.setInterim(interim);

        LOG.exiting(CLASSNAME, m_);
        return transcript;
    }

    /**
     * Adapt the TRAX data from the collection of data value objects into a
     * Transcript object.
     *
     * @param programCode The graduation program code that influences sort
     * order.
     * @param traxTranscriptCourses
     */
    private List<TranscriptResult> adapt(
            final GraduationProgramCode programCode,
            final List<TranscriptCourse> traxTranscriptCourses) {
        final String m_ = "adapt(GraduationProgramCode, List<TranscriptCourse>)";
        LOG.entering(CLASSNAME, m_, traxTranscriptCourses);

        List<TranscriptResult> transcriptResults = Collections.emptyList();

        if (traxTranscriptCourses != null) {
            final int size = traxTranscriptCourses.size();
            transcriptResults = new ArrayList<>(size);

            for (final TranscriptCourse traxCourse : traxTranscriptCourses) {
                final String courseType = traxCourse.getCourseType();

                final String eq = traxCourse.getEquivalency();
                final String req = traxCourse.getRequirement();
                final String ufg = traxCourse.getUsedForGrad();
                final String reqName = getName(req, programCode.toString());
                final TranscriptResultImpl tResult = new TranscriptResultImpl(
                        req, eq, ufg, reqName);

                final String courseName = traxCourse.getCourseName();
                final String courseCode = traxCourse.getCourseCode();
                final String courseLevel = traxCourse.getCourseLevel();
                final String traxCredits = traxCourse.getCredits();
                final String relatedCourse = traxCourse.getRelatedCourse();
                final String relatedLevel = traxCourse.getRelatedLevel();

                final String sessionDate = traxCourse.getSessionDate();
                final CourseImpl course = new CourseImpl(
                        courseName, courseCode,
                        courseLevel, traxCredits,
                        sessionDate, courseType,
                        relatedCourse, relatedLevel);

                tResult.setCourse(course);

                final String schoolPct = traxCourse.getSchoolPercent();
                final String examPct = traxCourse.getExamPercent();
                String finalPct = traxCourse.getFinalPercent();
                final String finalLetterGrade = traxCourse.getFinalLetterGrade();
                final String interimPct = traxCourse.getInterimMark();
                final String interimLetterGrade = traxCourse.getInterimLetterGrade();

                final MarkImpl mark = new MarkImpl();
                mark.setSchoolPercent(schoolPct);
                mark.setExamPercent(examPct);

                // Marks should only contain interim OR final
                if ("0".equals(finalPct)) {
                    finalPct = "";
                }

                if (finalPct.isEmpty() && finalLetterGrade.isEmpty()) {
                    mark.setInterimLetterGrade(interimLetterGrade);
                    mark.setInterimPercent(interimPct);
                } else {
                    mark.setFinalLetterGrade(finalLetterGrade);
                    mark.setFinalPercent(finalPct);
                }

                tResult.setMark(mark);
                transcriptResults.add(tResult);
            }

            sort(transcriptResults, programCode);
        }

        LOG.exiting(CLASSNAME, m_);
        return transcriptResults;
    }

    /**
     * Convert non-graduation reasons from a TRAX map to an STs list.
     *
     * @param traxStudent The student instance that has non-grad reasons to
     * convert.
     *
     * @return The map of non-grad reasons converted from a map to a list of
     * NonGradReasons instances.
     */
    private List<NonGradReason> adaptReasons(final StudentInfo traxStudent) {
        final String _m = "adaptReasons(StudentInfo)";
        LOG.entering(CLASSNAME, _m);

        final Map<String, String> traxReasons = traxStudent.getNonGradReasons();
        final List<NonGradReason> reasons = new ArrayList<>();

        for (Map.Entry<String, String> entry : traxReasons.entrySet()) {
            final String key = entry.getKey();
            final String value = entry.getValue();
            NonGradReasonImpl r = new NonGradReasonImpl();
            r.setCode(key);
            r.setDescription(value);
            reasons.add(r);
        }

        LOG.exiting(CLASSNAME, _m);
        return reasons;
    }

    /**
     * Create an unofficial transcript of grades report.
     *
     * @param reportFormat
     * @param preview
     * @param student
     * @param school
     * @param logo
     * @param transcript
     * @param program
     * @param nonGradReasons
     * @param gradMessage
     *
     * @return
     *
     * @throws DomainServiceException
     */
    private synchronized StudentTranscriptReport createReport(
            final ReportFormat reportFormat,
            final boolean preview,
            final Student student,
            final School school,
            final String logo,
            final ca.bc.gov.educ.isd.transcript.Transcript transcript,
            final GradProgram program,
            final List<NonGradReason> nonGradReasons,
            final String gradMessage,
            final Date updateDt,
            final Parameters parameters,
            final GraduationData graduationData) throws DomainServiceException, IOException {
        final String _m = "createReport(...)";
        LOG.entering(CLASSNAME, _m);

        final TranscriptReport report = reportService.createTranscriptReport();

        if (parameters != null) {
            report.setParameters(parameters);
        }

        // Indicate official/unofficial
        report.setPreview(preview);

        report.setStudent(student);
        report.setSchool(school, logo);
        report.setGraduationProgram(program);
        report.setTranscript(transcript);
        report.setGraduationStatus(nonGradReasons, gradMessage);
        report.setReportDate(updateDt);
        report.setFormat(reportFormat);

        final boolean interim = ((TranscriptImpl) transcript).getInterim();
        report.setInterim(interim);

        if (reportFormat == XML) {
            final ParameterPredicate pp = reportService.createParameterPredicate();
            pp.setKey(PESC_HST_PREDICATE);
            report.setParameterPredicate(pp);
            report.setGraduationData(graduationData);
        }

        final ReportDocument document;

        try {
            document = reportService.export(report);
        } catch (final Exception ex) {
            final String msg = "Failed to create report.";
            LOG.log(Level.SEVERE, msg, ex);
            final DomainServiceException dse = new DomainServiceException(msg, ex);
            LOG.throwing(CLASSNAME, _m, dse);
            throw dse;
        }
        LOG.log(Level.FINE, "Created document {0} for student {1}.", new Object[]{document, student.getPen()});

        final String filename = report.getFilename();
        final byte[] content = document.asBytes();

        if (isEmpty(content)) {
            final String msg = "The generated report output is empty.";
            DomainServiceException dse = new DomainServiceException(msg);
            LOG.throwing(CLASSNAME, _m, dse);
            throw dse;
        }

        final StudentTranscriptReport transcriptReport = new StudentTranscriptReportImpl(
                content, reportFormat, filename, "Transcript"
        );
        LOG.log(Level.FINE, "Created StudentTranscriptReport {0} for student {1}.", new Object[]{transcriptReport, student.getPen()});

        LOG.exiting(CLASSNAME, _m);
        return transcriptReport;
    }

    @Override
    @RolesAllowed({FULFILLMENT_SERVICES_USER})
    public Parameters createParameters() {
        final String _m = "createParameters()";
        LOG.entering(CLASSNAME, _m);

        Parameters parameters = reportService.createParameters();

        LOG.exiting(CLASSNAME, _m);
        return parameters;
    }

    private StudentTranscriptReport getStudentTranscriptReport(
            final PersonalEducationNumber personalEducationNumber,
            final ReportFormat format,
            final boolean preview,
            final Parameters parameters,
            final boolean interim) throws DomainServiceException, IOException {
        final String _m = "getStudentTranscriptReport(String, ReportFormat, boolean, Parameters, boolean)";
        LOG.entering(CLASSNAME, _m);
        final String pen = personalEducationNumber.getValue();
        final StudentInfo studentInfo = getStudentInfo(pen);
        final StudentDemographic studentDemog = getStudentDemog(pen);

        // Adapt TRAX data to other objects for reporting.
        final String programCode = studentInfo.getGradProgram();
        final String logo = studentInfo.getLogo();
        final Transcript transcript = getTranscript(pen, interim);

        final Student student = adaptStudent(personalEducationNumber, studentInfo);
        final School school = adaptSchool(studentInfo);

        // FIXME: Replace with GraduationProgramCode enum.
        final GradProgram program = createGradProgram(programCode);
        final GraduationData graduationData = adaptGraduationData(studentInfo, studentDemog, transcript, programCode);

        final String gradMessage = studentInfo.getGradMessage();
        final List<NonGradReason> nonGradReasons = adaptReasons(studentInfo);

        final StudentTranscriptReport report = createReport(
                format,
                preview,
                student,
                school,
                logo,
                transcript,
                program,
                nonGradReasons,
                gradMessage,
                transcript.getIssueDate(),
                parameters,
                graduationData
        );

        LOG.exiting(CLASSNAME, _m);
        return report;
    }

    private String getCreditsUsedForGrad(final Transcript transcript) {
        final List<TranscriptResult> results = transcript.getResults();
        int totalCredits = 0;

        for (final TranscriptResult transcriptResult : results) {
            final String credits = nullSafe(transcriptResult.getUsedForGrad());
            totalCredits += parseCredits(credits);
        }

        return "" + totalCredits;
    }

    // FIXME: Pass in GraduationProgramCode enum
    private GraduationData adaptGraduationData(
            final StudentInfo studentInfo,
            final StudentDemographic studentDemog,
            final Transcript transcript,
            final String programCode) {
        final String _m = "adaptGraduationData(StudentInfo, StudentDemographic, Transcript, String)";
        final Object[] params = {studentInfo, studentDemog, transcript};
        LOG.entering(CLASSNAME, _m, params);

        final GraduationData graduationData = new GraduationDataImpl();
        final GraduationProgramCode program = GraduationProgramCode.valueFrom(programCode);

        Date gradDate = null;

        if (PROGRAM_SCCP.equals(program)) {
            final Long sccDate = studentDemog.getSccDate();

            if (sccDate != null && sccDate.compareTo(0L) != 0) {
                final SimpleDateFormat sdf = new SimpleDateFormat(DATE_TRAX_YMD);
                try {
                    gradDate = sdf.parse(sccDate.toString());
                } catch (final ParseException ex) {
                    LOG.log(Level.WARNING, "Failed to parse date: <{0}>", sccDate);
                }
            }
        } else {
            gradDate = studentDemog.getCertificateDate();
        }

        ((GraduationDataImpl) graduationData).setGraduationDate(gradDate);
        ((GraduationDataImpl) graduationData).setHonorsFlag(studentInfo.isHonourFlag());
        ((GraduationDataImpl) graduationData).setDogwoodFlag(studentInfo.isDogwoodFlag());
        ((GraduationDataImpl) graduationData).setProgramNames(studentInfo.getAcademicProgram());
        final String creditsUsedForGrad = getCreditsUsedForGrad(transcript);
        ((GraduationDataImpl) graduationData).setTotalCreditsUsedForGrad(creditsUsedForGrad);

        LOG.exiting(CLASSNAME, _m);

        return graduationData;
    }

    @Override
    @RolesAllowed({STUDENT_TRANSCRIPT_REPORT, USER})
    public StudentTranscriptReport buildTranscriptReport(final ReportFormat format, final boolean interim) throws DomainServiceException, IOException, DataException {
        return createTranscriptReport(format, true, interim);
    }

    /**
     * Ensure that the student's highest mark for a particular course is used.
     * This will remove any duplicate courses that may be present in favour of
     * the highest marked course.
     *
     * @param results Courses for PEN user which might have duplicated courses
     * @return
     */
    private List<TranscriptCourse> filterCourses(final List<TranscriptCourse> results) {

        final List<TranscriptCourse> resultOfCourses = new ArrayList<>();
        for (final TranscriptCourse course : results) {

            if (!resultOfCourses.contains(course)) {
                final TranscriptCourse interimCourse
                        = getInterimCourse(course, results);

                if (!(resultOfCourses.contains(interimCourse))) {
                    resultOfCourses.add(interimCourse);
                }
            }
        }

        return resultOfCourses;
    }

    /**
     * If the in progress course is a duplicate of a successfully complete
     * course (i.e. the course already appears on the student's transcript with
     * a passing final mark), the in progress course replaces the successfully
     * completed occurrence of the course if and only if the interim percent is
     * greater than the final percent on the successfully completed occurrence
     * of the course. If the interim percent is blank it should not replace the
     * successfully completed occurrence of the course.
     */
    private TranscriptCourse getInterimCourse(
            TranscriptCourse course,
            final List<TranscriptCourse> results) {
        //Check for dulicate courses
        for (final TranscriptCourse compareCourse : results) {
            //Check and compare two courses for duplication and if required
            //replace course based on requirement.
            if (course.courseEquals(compareCourse)
                    && course.compareCourse(compareCourse)) {
                course = compareCourse;
            }
        }
        return course;

    }

    /**
     * The number of credits can be a pure numeric value or adorned with extra
     * characters (e.g., 2, 2p, (4)). This parses the numeric value regardless
     * of whether there are non-numeric characters present.
     *
     * @param credits The number of credits to parse.
     * @return The parsed value, or 0 if there were no digits present.
     */
    private int parseCredits(final String credits) {
        final String _m = "parseCredits(String)";
        LOG.entering(CLASSNAME, _m);

        // Strip out any non-digits.
        final String numericCredits = credits.replaceAll("[^\\d.]", "");
        int result = 0;

        try {
            if (!numericCredits.isEmpty()) {
                result = parseInt(numericCredits);
            }
        } catch (final Exception ex) {
            LOG.log(Level.WARNING, "Could not parse credits: " + credits, ex);
        }

        LOG.exiting(CLASSNAME, _m);
        return result;

    }

    /**
     * @param results
     * @param code
     * @inheritDoc
     */
    @RolesAllowed({USER, FULFILLMENT_SERVICES_USER})
    @Override
    public List<TranscriptResult> sort(
            final List<TranscriptResult> results,
            final GraduationProgramCode code) {

        // Perform multiple stable sorts over the transcript results.
        final Comparator<TranscriptResult> comparator = createComparator(code);
        Collections.sort(results, comparator);

        // Sort the ungraded courses to the end of the list, which will then
        // be pushed up using the assessment comparator.
        final Comparator<TranscriptResult> ungraded = createUngradedComparator();
        Collections.sort(results, ungraded);

        // Sort the ReportCourseType.ASSESSMENT values to the end of the
        // list. This could use a comparator chain.
        final Comparator<TranscriptResult> assessments = createAssessmentComparator();
        Collections.sort(results, assessments);

        return results;
    }

    /**
     * The sort order for the courses is as follows:
     *
     * For the 1986 and Adult transcript, the courses are sorted only by course
     * code. For the 2004, 1995, and SCCP transcript, the courses are sorted by
     * course level and then by course name.
     *
     * @param code Program code that influences sort order.
     */
    private Comparator<TranscriptResult> createComparator(
            final GraduationProgramCode code) {
        final Comparator<TranscriptResult> result;

        switch (code) {
            case PROGRAM_1950:
            case PROGRAM_1986:
                result = createAdultComparator();
                break;

            // 1995, 2004, 2018, etc.
            default:
                result = createRegularComparator();
                break;
        }

        return result;
    }

    /**
     * Returns a comparator that can sort by course code.
     *
     * @return A comparator for sorting by course code.
     */
    private Comparator<TranscriptResult> createAdultComparator() {
        return new Comparator<TranscriptResult>() {
            @Override
            public int compare(
                    final TranscriptResult tr1,
                    final TranscriptResult tr2) {
                final String reportCourseType1 = getReportCourseType(tr1);
                final String reportCourseType2 = getReportCourseType(tr2);
                final String code1 = getCourseCode(tr1);
                final String code2 = getCourseCode(tr2);

                return new CompareToBuilder()
                        .append(reportCourseType1, reportCourseType2)
                        .append(code1, code2)
                        .toComparison();
            }
        };
    }

    /**
     * Called for non-Adult reports to provide comparators that can perform
     * stable sub-sorts on the transcript results.
     *
     * @return A list of stable comparators that should be executed in order to
     * sort the transcript results.
     */
    private Comparator<TranscriptResult> createRegularComparator() {
        return new Comparator<TranscriptResult>() {
            @Override
            public int compare(final TranscriptResult tr1, final TranscriptResult tr2) {
                final int level1 = getCourseLevel(tr1);
                final int level2 = getCourseLevel(tr2);
                final String name1 = getCourseName(tr1);
                final String name2 = getCourseName(tr2);

                return new CompareToBuilder()
                        .append(level1, level2)
                        .append(name1, name2)
                        .toComparison();
            }
        };
    }

    /**
     * Sorts ungraded to the bottom of the list of transcript results.
     *
     * @return A comparator that can sort ungraded results.
     */
    private Comparator<TranscriptResult> createUngradedComparator() {
        return new Comparator<TranscriptResult>() {
            @Override
            public int compare(final TranscriptResult tr1, final TranscriptResult tr2) {
                final int level1 = getCourseLevel(tr1);
                final int level2 = getCourseLevel(tr2);

                final int comparison = new CompareToBuilder()
                        .append(level1, level2)
                        .toComparison();

                return SORT_UNGRADED.equals("" + level1)
                        || SORT_UNGRADED.equals("" + level2)
                                ? comparison
                                : 0;

            }
        };
    }

    /**
     * Used to sort assessments to the bottom of the list of transcript results.
     *
     * @return A comparator that can sort assessment results.
     */
    private Comparator<TranscriptResult> createAssessmentComparator() {
        return new Comparator<TranscriptResult>() {
            @Override
            public int compare(final TranscriptResult tr1, final TranscriptResult tr2) {
                final int level1 = getCourseLevel(tr1);
                final int level2 = getCourseLevel(tr2);

                final String reportCourseType1 = getReportCourseType(tr1);
                final String reportCourseType2 = getReportCourseType(tr2);

                final String courseCode1 = getCourseCode(tr1);
                final String courseCode2 = getCourseCode(tr2);

                final int comparison = new CompareToBuilder()
                        .append(level1, level2)
                        .append(reportCourseType1, reportCourseType2)
                        .append(courseCode1, courseCode2)
                        .toComparison();

                return ASSESSMENT.isCode(reportCourseType1)
                        || ASSESSMENT.isCode(reportCourseType2)
                                ? comparison
                                : 0;
            }
        };
    }

    /**
     * Convenience method to obtain a sortable course type.
     *
     * @param tr The transcript result containing report course type that
     * control sort order.
     * @return The report course type for the given transcript result.
     */
    private String getReportCourseType(final TranscriptResult tr) {
        final Course c = tr.getCourse();
        final String reportCourseType = c == null
                ? PROVINCIALLY_EXAMINABLE.getCode()
                : c.getType();

        return reportCourseType;
    }

    /**
     * Convenience method to obtain a sortable course level.
     *
     * @param tr The transcript result containing course levels to be sorted.
     * @return The course level or "99" if the course has no level (and should
     * therefore be sorted to the bottom).
     */
    private int getCourseLevel(final TranscriptResult tr) {
        final ca.bc.gov.educ.isd.transcript.Course c = tr.getCourse();
        final String cl = c == null ? "" : c.getLevel().trim();
        final String type = c == null ? "" : c.getType();

        final String level = ASSESSMENT.isCode(type)
                ? SORT_ASSESSMENT
                : SORT_UNGRADED;
        final String courseLevel = cl.isEmpty() ? level : cl;
        int result = 0;

        try {
            // Parse "12A" to 12, "11F" to 11, "10" to 10, for sort purposes.
            final NumberFormat nf = getIntegerInstance();
            result = nf.parse(courseLevel).intValue();
        } catch (final Exception ex) {
            LOG.log(Level.SEVERE,
                    "Could not parse course level into integer: " + courseLevel,
                    ex);
        }

        return result;
    }

    /**
     * Convenience method to obtain a sortable course name.
     *
     * @param tr The transcript result containing course names to be sorted.
     * @return The course name, never null, possibly empty.
     */
    private String getCourseName(final TranscriptResult tr) {
        final Course c = tr.getCourse();
        final String name = c == null ? "" : c.getName();

        return nullSafe(name);
    }

    /**
     * Convenience method to obtain a sortable course name.
     *
     * @param tr The transcript result containing course names to be sorted.
     * @return The course name, never null, possibly empty.
     */
    private String getCourseCode(final TranscriptResult tr) {
        final Course c = tr.getCourse();
        final String code = c == null ? "" : c.getCode();

        return nullSafe(code);
    }
}
