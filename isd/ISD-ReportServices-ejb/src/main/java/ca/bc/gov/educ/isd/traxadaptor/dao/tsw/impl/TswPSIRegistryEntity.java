/*
 * *********************************************************************
 *  Copyright (c) 2016, Ministry of Education, BC.
 *
 *  All rights reserved.
 *    This information contained herein may not be used in whole
 *    or in part without the express written consent of the
 *    Government of British Columbia, Canada.
 *
 *  Revision Control Information
 *  File:                TswPSIRegistryEntity.java
 *  Date of Last Commit: $Date::                                               $
 *  Revision Number:     $Rev::                                                $
 *  Last Commit by:      $Author::                                             $
 *
 * ***********************************************************************
 */
package ca.bc.gov.educ.isd.traxadaptor.dao.tsw.impl;

import ca.bc.gov.educ.isd.traxadaptor.impl.TRAXCountryConverter;
import ca.bc.gov.educ.isd.eis.trax.db.TRAXCountryAdmin;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;

/**
 * An autogenerated class that represents the TSW_PSI_REGISTRY_VW view in the
 * TRAX database.
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@Table(name = "TSW_PSI_REGISTRY_VW")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "TswPSIRegistryEntity.findAll", query = "SELECT t FROM TswPSIRegistryEntity t"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsiCode", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psiCode = :psiCode"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsiName", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psiName = :psiName"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsiNameLike", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psiName LIKE :psiName"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsiCslCode", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psiCslCode = :psiCslCode"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsiAttnName", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psiAttnName = :psiAttnName"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByAddress1", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.address1 = :address1"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByAddress2", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.address2 = :address2"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByAddress3", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.address3 = :address3"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByCity", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.city = :city"),
	@NamedQuery(name = "TswPSIRegistryEntity.findByProvCode", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.provCode = :provCode"),
	/**
	 * Note: Query used the TRAX (not ISO) country code!!!
	 */
	@NamedQuery(name = "TswPSIRegistryEntity.findByProvCodeNEAndCntryCode", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.provCode != :provCode AND t.traxCountryCode = :cntryCode"),
	/**
	 * Note: Query used the TRAX (not ISO) country code!!!
	 */
	@NamedQuery(name = "TswPSIRegistryEntity.findByCntryCode", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.traxCountryCode = :cntryCode"),
	/**
	 * Note: Query used the TRAX (not ISO) country code!!!
	 */
	@NamedQuery(name = "TswPSIRegistryEntity.findByCntryCodeNE", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.traxCountryCode != :cntryCode"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByOpenFlag", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.openFlag = :openFlag"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByGlobalSignOff", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.globalSignOff = :globalSignOff"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsiPostal", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psiPostal = :psiPostal"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByFax", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.fax = :fax"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPhone1", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.phone1 = :phone1"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByTransmissionMode", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.transmissionMode = :transmissionMode"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsisCode", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psisCode = :psisCode"),
    @NamedQuery(name = "TswPSIRegistryEntity.findByPsiGrouping", query = "SELECT t FROM TswPSIRegistryEntity t WHERE t.psiGrouping = :psiGrouping")})
public class TswPSIRegistryEntity implements Serializable, TRAXCountryAdmin {

    // ------------------ CONSTANT(S) AND FINAL(S)
    private static final long serialVersionUID = 1L;
    private static final String CLASSNAME = TswPSIRegistryEntity.class.getName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    // ------------------ VARIABLE(S)
    @Size(max = 3)
    @Column(name = "PSI_CODE")
    @Id
    private String psiCode;
    @Size(max = 40)
    @Column(name = "PSI_NAME")
    private String psiName;
    @Size(max = 4)
    @Column(name = "PSI_CSL_CODE")
    private String psiCslCode;
    @Size(max = 40)
    @Column(name = "PSI_ATTN_NAME")
    private String psiAttnName;
    @Size(max = 40)
    @Column(name = "ADDRESS1")
    private String address1;
    @Size(max = 40)
    @Column(name = "ADDRESS2")
    private String address2;
    @Size(max = 40)
    @Column(name = "ADDRESS3")
    private String address3;
    @Size(max = 30)
    @Column(name = "CITY")
    private String city;
    @Size(max = 2)
    @Column(name = "PROV_CODE")
    private String provCode;
    @Size(max = 2)
    @Column(name = "CNTRY_CODE")
	private String traxCountryCode;
	transient private String isoCountryCode;
    @Column(name = "OPEN_FLAG")
    private Character openFlag;
    @Column(name = "GLOBAL_SIGN_OFF")
    private Character globalSignOff;
    @Size(max = 9)
    @Column(name = "PSI_POSTAL")
    private String psiPostal;
    // @Pattern(regexp="^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$", message="Invalid phone/fax format, should be as xxx-xxx-xxxx")//if the field contains phone or fax number consider using this annotation to enforce field validation
    @Size(max = 12)
    @Column(name = "FAX")
    private String fax;
    @Size(max = 12)
    @Column(name = "PHONE1")
    private String phone1;
    @Size(max = 5)
    @Column(name = "TRANSMISSION_MODE")
    private String transmissionMode;
    @Size(max = 8)
    @Column(name = "PSIS_CODE")
    private String psisCode;
    @Size(max = 2000)
    @Column(name = "PSI_URL")
    private String psiUrl;
    @Size(max = 3)
    @Column(name = "PSI_GROUPING")
    private String psiGrouping;

    // ------------------ CONSTRUCTOR(S)
    /**
     * Empty constructor
     */
    public TswPSIRegistryEntity() {
    }

    /**
     * Constructor that initializes the object with its primary key
     *
     * @param psiCode Code that identifies the PSI registry.
     */
    public TswPSIRegistryEntity(String psiCode) {
        this.psiCode = psiCode;
    }

    // ------------------ GETTER(S) AND SETTER(S)
    /**
     * Gets the PSI Code (primary key).
     *
     * @return the PSI code.
     */
    public String getPsiCode() {
        return psiCode;
    }

    /**
     * Sets the PSI code.
     *
     * @param psiCode PSI code that replaces the old one (if any)
     */
    public void setPsiCode(String psiCode) {
        this.psiCode = psiCode;
    }

    /**
     * Gets the PSI Name
     *
     * @return the PSI name
     */
    public String getPsiName() {
        return psiName;
    }

    /**
     * Sets the PSI Name
     *
     * @param psiName PSI name that replaces the old one (if any)
     */
    public void setPsiName(String psiName) {
        this.psiName = psiName;
    }

    /**
     * Gets the CLS Code.
     *
     * @return the CLS code.
     */
    public String getPsiCslCode() {
        return psiCslCode;
    }

    /**
     * Sets the CLS Code.
     *
     * @param psiCslCode CLS code that replaces the old one (if any).
     */
    public void setPsiCslCode(String psiCslCode) {
        this.psiCslCode = psiCslCode;
    }

    /**
     * Gets PSI Attn Name.
     *
     * @return the PSI Attn Name
     */
    public String getPsiAttnName() {
        return psiAttnName;
    }

    /**
     * Sets the Attn Name.
     *
     * @param psiAttnName Attn Name that replaces the old one (if any).
     */
    public void setPsiAttnName(String psiAttnName) {
        this.psiAttnName = psiAttnName;
    }

    /**
     * Gets the Address 1.
     *
     * @return Gets the first address option.
     */
    public String getAddress1() {
        return address1;
    }

    /**
     * Sets the Address 1.
     *
     * @param address1 First Address option that replaces the old one (if any)
     */
    public void setAddress1(String address1) {
        this.address1 = address1;
    }

    /**
     * Gets the second Address option.
     *
     * @return second address option.
     */
    public String getAddress2() {
        return address2;
    }

    /**
     * Sets the second address option.
     *
     * @param address2 Second address option that replaces the old one (if any)
     */
    public void setAddress2(String address2) {
        this.address2 = address2;
    }

    /**
     * Gets the third address option.
     *
     * @return third address option.
     */
    public String getAddress3() {
        return address3;
    }

    /**
     * Sets the third address option.
     *
     * @param address3 Third address option that replaces the old one (if any)
     */
    public void setAddress3(String address3) {
        this.address3 = address3;
    }

    /**
     * Gets the City of the PSI Registry.
     *
     * @return the city of the PSI Registry.
     */
    public String getCity() {
        return city;
    }

    /**
     * Sets the city of the PSI Registry.
     *
     * @param city city that replaces the old one (if any)
     */
    public void setCity(String city) {
        this.city = city;
    }

    /**
     * Gets the Provincial Code.
     *
     * @return the provincial code.
     */
    public String getProvCode() {
        return provCode;
    }

    /**
     * Sets the povincial code.
     *
     * @param provCode Provincial code that replaces the old one (if any)
     */
    public void setProvCode(String provCode) {
        this.provCode = provCode;
    }

	@Override
	public String getTRAXCountryCode() {
		return traxCountryCode;
    }

	@Override
	public void setTRAXCountryCode(final String traxCountryCode) {
		this.traxCountryCode = traxCountryCode;
		this.isoCountryCode = TRAXCountryConverter.getInstance().traxToISO(traxCountryCode);
    }

	/**
	 * Gets ISO Country Code.
	 *
	 * @return
	 */
	@Override
	public String getCountryCode() {
		if (this.isoCountryCode == null) {
			this.isoCountryCode = TRAXCountryConverter.getInstance().traxToISO(traxCountryCode);
		}
		return isoCountryCode;
	}

	/**
	 * Sets the ISO country code.
	 *
	 */
	@Override
	public void setCountryCode(final String isoCountryCode) {
		this.isoCountryCode = isoCountryCode;
		this.traxCountryCode = TRAXCountryConverter.getInstance().isoToTRAX(isoCountryCode);
	}

    /**
     * Gets the Open Flag.
     *
     * @return the open flag.
     */
    public Character getOpenFlag() {
        return openFlag;
    }

    /**
     * Sets the open flag.
     *
     * @param openFlag open flag that replaces the old one (if any)
     */
    public void setOpenFlag(Character openFlag) {
        this.openFlag = openFlag;
    }

    /**
     * Gets the Global Sign Off.
     *
     * @return the global sign off.
     */
    public Character getGlobalSignOff() {
        return globalSignOff;
    }

    /**
     * Sets the Global Sign Off.
     *
     * @param globalSignOff Global Sign Off that replaces the old one (if any).
     */
    public void setGlobalSignOff(Character globalSignOff) {
        this.globalSignOff = globalSignOff;
    }

    /**
     * Gets the postal code.
     *
     * @return the postal code.
     */
    public String getPsiPostal() {
        return psiPostal;
    }

    /**
     * Sets the postal code.
     *
     * @param psiPostal postal code that replaces the old one (if any)
     */
    public void setPsiPostal(String psiPostal) {
        this.psiPostal = psiPostal;
    }

    /**
     * Gets the Fax number.
     *
     * @return the fax number.
     */
    public String getFax() {
        return fax;
    }

    /**
     * Sets the fax number.
     *
     * @param fax the fax that replaces the old one (if any)
     */
    public void setFax(String fax) {
        this.fax = fax;
    }

    /**
     * Gets the Phone number.
     *
     * @return the phone number.
     */
    public String getPhone1() {
        return phone1;
    }

    /**
     * Sets the phone number.
     *
     * @param phone1 phone number that replaces the old one (if any)
     */
    public void setPhone1(String phone1) {
        this.phone1 = phone1;
    }

    /**
     * Gets the transmission mode.
     *
     * @return the transmission mode.
     */
    public String getTransmissionMode() {
        return transmissionMode;
    }

    /**
     * Sets the transmission mode.
     *
     * @param transmissionMode the transmission mode that replaces the old one
     * (if any)
     */
    public void setTransmissionMode(String transmissionMode) {
        this.transmissionMode = transmissionMode == null ? "" : transmissionMode.trim();
    }

    /**
     * Gets the PSIS code.
     *
     * @return the PSIS code.
     */
    public String getPsisCode() {
        return psisCode;
    }

    /**
     * Sets the PSIS code.
     *
     * @param psisCode the PSIS code that replaces the old one (if any).
     */
    public void setPsisCode(String psisCode) {
        this.psisCode = psisCode;
    }

    /**
     * Gets the URL.
     *
     * @return the URL.
     */
    public String getPsiUrl() {
        return psiUrl;
    }

    /**
     * Sets the URL.
     *
     * @param psiUrl the URL that replaces the old one (if any).
     */
    public void setPsiUrl(String psiUrl) {
        this.psiUrl = psiUrl;
    }

    /**
     * Gets the grouping code.
     *
     * @return the grouping code.
     */
    public String getPsiGrouping() {
        return psiGrouping;
    }

    /**
     * Sets the grouping code.
     *
     * @param psiGrouping the grouping that replaces the old one (if any)
     */
    public void setPsiGrouping(String psiGrouping) {
        this.psiGrouping = psiGrouping;
    }

    // ------------------ METHOD(S)
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (psiCode != null ? psiCode.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        if (object == null) {
            return false;
        }
        if (!(object instanceof TswPSIRegistryEntity)) {
            return false;
        }
        final TswPSIRegistryEntity other = (TswPSIRegistryEntity) object;
        if (!this.psiCode.equals(other.psiCode)) {
            return false;
        }
        return true;
    }
}
